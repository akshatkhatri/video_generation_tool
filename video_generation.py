from moviepy import VideoFileClip, TextClip, CompositeVideoClip, AudioFileClip, concatenate_videoclips
import os

# Load the video clip
video_clip = VideoFileClip("videos/energy/energy.mp4")

# Calculate the total text duration (sum of all text clip durations)
total_text_duration = 30  # Adjust based on your text's total duration

# Loop the video if its duration is smaller than the total text duration
video_duration = video_clip.duration
if video_duration < total_text_duration:
    # Repeat the video by concatenating it until the total duration is reached
    num_loops = int(total_text_duration // video_duration) + 1
    video_clip = concatenate_videoclips([video_clip] * num_loops)

# Load the voiceover audio (optional)
audio_clip = AudioFileClip("output_audio.mp3")

# Simulated DeepSeek output (catchy lines generated by the model)
catchy_lines = [
    "Telangana leads India’s green revolution with Rs 29,000 crore in clean energy investments!",
    "Ecoren Energy and GPSR Arya Pvt Ltd make a game-changing move in Telangana’s renewable energy future.",
    "This new policy could shape India’s journey towards clean energy and sustainability."
]

# Create text clips for each catchy line
text_clips = []
start_times = [0, 10, 20]  # Starting at 0s, 10s, 20s respectively
for i, line in enumerate(catchy_lines):
    text_clip = TextClip(text=line, font="roboto.ttf", font_size=24, color='white', duration=10)
    text_clip = text_clip.with_position("center").with_start(start_times[i])  # Set start time for each
    text_clips.append(text_clip)

# Combine the video with the text clips
final_video = CompositeVideoClip([video_clip] + text_clips)

# Add the audio to the video (optional)
final_video = final_video.with_audio(audio_clip)

# Save the final video
final_video.write_videofile("final_video_with_generated_text_overlay.mp4", codec="libx264")
