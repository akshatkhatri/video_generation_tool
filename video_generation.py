from moviepy import VideoFileClip, TextClip, CompositeVideoClip, AudioFileClip, concatenate_videoclips
from generate_catchy_lines import generate_catchy_lines_for_an_article
import os

def generate_video(video_clip_path,audio_clip_path,catchy_lines,news_headline,news_description,video_category):
    # Load the video clip
    video_clip = VideoFileClip(f"static/videos/{video_category}/{video_category}.mp4")

    # Calculate the total text duration (sum of all text clip durations)
    total_text_duration = 30  # Adjust based on your text's total duration

    # Loop the video if its duration is smaller than the total text duration
    video_duration = video_clip.duration
    if video_duration < total_text_duration:
        # Repeat the video by concatenating it until the total duration is reached
        num_loops = int(total_text_duration // video_duration) + 1
        video_clip = concatenate_videoclips([video_clip] * num_loops)

    # Load the voiceover audio (optional)
    audio_clip = AudioFileClip(audio_clip_path)

    # Simulated DeepSeek output (catchy lines generated by the model)
    catchy_lines = generate_catchy_lines_for_an_article(news_headline,news_description)

    # Create text clips for each catchy line
    text_clips = []
    start_times = [0, 10, 20] 
    for i, line in enumerate(catchy_lines):
        text_clip = TextClip(text=line, font="roboto.ttf", font_size=24, color='white', duration=10)
        text_clip = text_clip.with_position("center").with_start(start_times[i])  # Set start time for each
        text_clips.append(text_clip)

    # Combine the video with the text clips
    final_video = CompositeVideoClip([video_clip] + text_clips)

    # Add the audio to the video (optional)
    final_video = final_video.with_audio(audio_clip)

    # Save the final video
    final_video.write_videofile(video_clip_path, codec="libx264")
